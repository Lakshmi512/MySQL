Task 

1. Create a loop for a table to insert a record into a tale for two columns in first columns you have to inset a data ranging from 1 to 100 and in second column you have to inset a square of the first column: -

create table loop_1(num int , sqr_num int)

DELIMITER $$
create procedure Data_1()
BEGIN
set @a = 1 , @b = 1;
gen_1 : loop
insert into loop_1 values( @a , @b ) ;
set @a = @a +1 , @b = @a * @a  ;
if @a = 101 then
    leave gen_1 ;
end if ;
end loop gen_1 ;
END ;

call Data_1()

select * from loop_1


2. create a user defined function to find out a date differences in number of days: -


DELIMITER $$ 
create function date_diff_days (end_date date , start_date date)
returns int
DETERMINISTIC
begin
     declare date_difference int ;
    SET date_difference = DATEDIFF(end_date , start_date);
    return date_difference;
END $$

select date_diff_days(curdate(),'1993-12-05' )

select date_diff_days('1996-08-18' , '1993-12-05' )



3. create a UDF to find out a log base 10 of any given number: -


DELIMITER $$
create function log_base_10(a int)
returns decimal(30,12)
DETERMINISTIC
BEGIN
    Declare b decimal(30,12) ;
    set b = log10(a) ;
    return b ;
END $$

select log_base_10(250)

select log_base_10(489)

select log_base_10(1296345)



4. create a UDF which will be able to check a total number of records available in your table: -

In case of MySQL 
They can’t be created because they can’t take dynamics (e.g., count records for multiple tables)
But can be created in case of Ms SQL.
(a) It I’ll be used for single table.

DELIMITER $$
create function total_records()
returns int
DETERMINISTIC
BEGIN
     Declare b int ;
     set b = (select count( * ) from sales);
     return b ;
END $$

select total_records()
OR
DELIMITER $$
create function total_records()
returns bigint
DETERMINISTIC
BEGIN
     Declare b bigint ;
     set b = (select count( * ) from sales);
     return b ;
END $$

select total_records()

(b) For multiple tables: - We create “STORED PROCEDURE” instead of “UDF”.

DELIMITER $$
create procedure total_records1(in tablename varchar(100))
BEGIN
SET @t1 = CONCAT( ' SELECT COUNT(*)  FROM ' , tablename ) ;
PREPARE stmt3 FROM @t1 ;
EXECUTE stmt3 ;
DEALLOCATE PREPARE stmt3 ;
END $$

call total_records1( 'sales' )

call total_records1('loop_1')

call total_records1( 'loop_table' )

call total_records1( 'loop_table1')

call total_records1( 'loop_table2')


 


5. create a procedure to find out 5th highest profit in your sales table you don’t have to use rank and windowing function: -
    
    
DELIMITER &&
create procedure 5th_rank()
BEGIN
 SELECT * FROM (SELECT * , ROW_NUMBER() OVER( ORDER BY profit DESC) AS 'ROW_NUM' FROM sales) AS test WHERE ROW_NUM = 5;
END &&;


call 5th_rank()

select * from sales

